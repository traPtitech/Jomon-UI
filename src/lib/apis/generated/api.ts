/* tslint:disable */
/* eslint-disable */
/**
 * Jomon API
 * JomonのAPIです。
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore error happens by importsNotUsedAsValues
import { Configuration } from './configuration';
// @ts-ignore error happens by importsNotUsedAsValues
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthInfo
 */
export interface AuthInfo {
    /**
     * 
     * @type {string}
     * @memberof AuthInfo
     */
    'code_challenge'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfo
     */
    'code_challenge_method'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfo
     */
    'client_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthInfo
     */
    'response_type'?: string;
}
/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'user': string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'comment': string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface FileMeta
 */
export interface FileMeta {
    /**
     * 
     * @type {string}
     * @memberof FileMeta
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FileMeta
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FileMeta
     */
    'mime_type': string;
    /**
     * 
     * @type {string}
     * @memberof FileMeta
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface Group
 */
export interface Group {
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Group
     */
    'budget': number | null;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Group
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface GroupDetail
 */
export interface GroupDetail {
    /**
     * 
     * @type {string}
     * @memberof GroupDetail
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GroupDetail
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GroupDetail
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof GroupDetail
     */
    'budget': number | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupDetail
     */
    'members': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupDetail
     */
    'owners': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GroupDetail
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof GroupDetail
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PostComment
 */
export interface PostComment {
    /**
     * 
     * @type {string}
     * @memberof PostComment
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface PostGroup
 */
export interface PostGroup {
    /**
     * 
     * @type {string}
     * @memberof PostGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PostGroup
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof PostGroup
     */
    'budget': number | null;
}
/**
 * 
 * @export
 * @interface PostRequest
 */
export interface PostRequest {
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'created_by': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'content': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostRequest
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PostRequest
     */
    'group': string | null;
    /**
     * 
     * @type {Array<RequestTarget>}
     * @memberof PostRequest
     */
    'targets': Array<RequestTarget>;
}
/**
 * 
 * @export
 * @interface PostTag
 */
export interface PostTag {
    /**
     * 
     * @type {string}
     * @memberof PostTag
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface PostTransaction
 */
export interface PostTransaction {
    /**
     * 
     * @type {number}
     * @memberof PostTransaction
     */
    'amount': number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostTransaction
     */
    'targets': Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostTransaction
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PostTransaction
     */
    'group': string | null;
    /**
     * 
     * @type {string}
     * @memberof PostTransaction
     */
    'request': string | null;
}
/**
 * 
 * @export
 * @interface PostTransactionWithOneTarget
 */
export interface PostTransactionWithOneTarget {
    /**
     * 
     * @type {number}
     * @memberof PostTransactionWithOneTarget
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof PostTransactionWithOneTarget
     */
    'target'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PostTransactionWithOneTarget
     */
    'tags': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PostTransactionWithOneTarget
     */
    'group': string | null;
    /**
     * 
     * @type {string}
     * @memberof PostTransactionWithOneTarget
     */
    'request': string | null;
}
/**
 * 
 * @export
 * @interface PutGroup
 */
export interface PutGroup {
    /**
     * 
     * @type {string}
     * @memberof PutGroup
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PutGroup
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof PutGroup
     */
    'budget': number | null;
}
/**
 * 
 * @export
 * @interface PutStatus
 */
export interface PutStatus {
    /**
     * 
     * @type {StatusEnum}
     * @memberof PutStatus
     */
    'status': StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PutStatus
     */
    'comment': string;
}
/**
 * 
 * @export
 * @interface PutUser
 */
export interface PutUser {
    /**
     * 
     * @type {string}
     * @memberof PutUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PutUser
     */
    'display_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof PutUser
     */
    'admin': boolean;
}
/**
 * 
 * @export
 * @interface Request
 */
export interface Request {
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'status': RequestStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'created_by': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Request
     */
    'content': string;
    /**
     * 
     * @type {Array<RequestTargetDetail>}
     * @memberof Request
     */
    'targets': Array<RequestTargetDetail>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Request
     */
    'tags': Array<Tag>;
    /**
     * 
     * @type {Group}
     * @memberof Request
     */
    'group': Group | null;
}

export const RequestStatusEnum = {
    Submitted: 'submitted',
    FixRequired: 'fix_required',
    Accepted: 'accepted',
    Completed: 'completed',
    Rejected: 'rejected'
} as const;

export type RequestStatusEnum = typeof RequestStatusEnum[keyof typeof RequestStatusEnum];

/**
 * 
 * @export
 * @interface RequestDetail
 */
export interface RequestDetail {
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'id': string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof RequestDetail
     */
    'status': StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'created_by': string;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof RequestDetail
     */
    'comments': Array<Comment>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RequestDetail
     */
    'files': Array<string>;
    /**
     * 
     * @type {Array<Status>}
     * @memberof RequestDetail
     */
    'statuses': Array<Status>;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof RequestDetail
     */
    'tags': Array<Tag>;
    /**
     * 
     * @type {Group}
     * @memberof RequestDetail
     */
    'group': Group | null;
    /**
     * 
     * @type {Array<RequestTargetDetail>}
     * @memberof RequestDetail
     */
    'targets': Array<RequestTargetDetail>;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof RequestDetail
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface RequestFile
 */
export interface RequestFile {
    /**
     * 
     * @type {any}
     * @memberof RequestFile
     */
    'file': any;
    /**
     * 
     * @type {string}
     * @memberof RequestFile
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface RequestTarget
 */
export interface RequestTarget {
    /**
     * 
     * @type {number}
     * @memberof RequestTarget
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof RequestTarget
     */
    'target': string;
}
/**
 * 
 * @export
 * @interface RequestTargetDetail
 */
export interface RequestTargetDetail {
    /**
     * 
     * @type {string}
     * @memberof RequestTargetDetail
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof RequestTargetDetail
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof RequestTargetDetail
     */
    'target': string;
    /**
     * 
     * @type {string}
     * @memberof RequestTargetDetail
     */
    'paid_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof RequestTargetDetail
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'created_by': string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof Status
     */
    'status': StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Status
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface StatusDetail
 */
export interface StatusDetail {
    /**
     * 
     * @type {string}
     * @memberof StatusDetail
     */
    'created_by': string;
    /**
     * 
     * @type {StatusEnum}
     * @memberof StatusDetail
     */
    'status': StatusEnum;
    /**
     * 
     * @type {Comment}
     * @memberof StatusDetail
     */
    'comment'?: Comment;
    /**
     * 
     * @type {string}
     * @memberof StatusDetail
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const StatusEnum = {
    Submitted: 'submitted',
    FixRequired: 'fix_required',
    Accepted: 'accepted',
    Completed: 'completed',
    Rejected: 'rejected'
} as const;

export type StatusEnum = typeof StatusEnum[keyof typeof StatusEnum];


/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Tag
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface Transaction
 */
export interface Transaction {
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Transaction
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'target': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'request': string | null;
    /**
     * 
     * @type {Array<Tag>}
     * @memberof Transaction
     */
    'tags': Array<Tag>;
    /**
     * 
     * @type {Group}
     * @memberof Transaction
     */
    'group': Group | null;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Transaction
     */
    'updated_at': string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'display_name': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'admin': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deleted_at': string | null;
}

/**
 * AdminsApi - axios parameter creator
 * @export
 */
export const AdminsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * adminユーザーを削除する。管理者権限が必要。
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmins: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('deleteAdmins', 'requestBody', requestBody)
            const localVarPath = `/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * adminユーザーの一覧を返す。管理者権限が必要。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * adminユーザーを追加する。管理者権限が必要。
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdmins: async (requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('postAdmins', 'requestBody', requestBody)
            const localVarPath = `/admins`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminsApi - functional programming interface
 * @export
 */
export const AdminsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminsApiAxiosParamCreator(configuration)
    return {
        /**
         * adminユーザーを削除する。管理者権限が必要。
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAdmins(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAdmins(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * adminユーザーの一覧を返す。管理者権限が必要。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdmins(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdmins(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * adminユーザーを追加する。管理者権限が必要。
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAdmins(requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAdmins(requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminsApi - factory interface
 * @export
 */
export const AdminsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminsApiFp(configuration)
    return {
        /**
         * adminユーザーを削除する。管理者権限が必要。
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAdmins(requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteAdmins(requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * adminユーザーの一覧を返す。管理者権限が必要。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdmins(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getAdmins(options).then((request) => request(axios, basePath));
        },
        /**
         * adminユーザーを追加する。管理者権限が必要。
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAdmins(requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.postAdmins(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminsApi - object-oriented interface
 * @export
 * @class AdminsApi
 * @extends {BaseAPI}
 */
export class AdminsApi extends BaseAPI {
    /**
     * adminユーザーを削除する。管理者権限が必要。
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public deleteAdmins(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).deleteAdmins(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーの一覧を返す。管理者権限が必要。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public getAdmins(options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).getAdmins(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーを追加する。管理者権限が必要。
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public postAdmins(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).postAdmins(requestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * PKCEを取得する｡
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePKCE: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/genpkce`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * PKCEを取得する｡
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePKCE(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePKCE(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * PKCEを取得する｡
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePKCE(options?: any): AxiosPromise<void> {
            return localVarFp.generatePKCE(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * PKCEを取得する｡
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public generatePKCE(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).generatePKCE(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile: async (fileID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileID' is not null or undefined
            assertParamExists('deleteFile', 'fileID', fileID)
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたファイルを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (fileID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileID' is not null or undefined
            assertParamExists('getFile', 'fileID', fileID)
            const localVarPath = `/files/{fileID}`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定されたファイルのメタデータを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMeta: async (fileID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fileID' is not null or undefined
            assertParamExists('getFileMeta', 'fileID', fileID)
            const localVarPath = `/files/{fileID}/meta`
                .replace(`{${"fileID"}}`, encodeURIComponent(String(fileID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ファイルをアップロードする。
         * @param {any} file 
         * @param {string} name 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFile: async (file: any, name: string, requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('postFile', 'file', file)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('postFile', 'name', name)
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('postFile', 'requestId', requestId)
            const localVarPath = `/files`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (requestId !== undefined) { 
                localVarFormParams.append('request_id', requestId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFile(fileID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFile(fileID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定されたファイルを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(fileID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(fileID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定されたファイルのメタデータを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFileMeta(fileID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FileMeta>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFileMeta(fileID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ファイルをアップロードする。
         * @param {any} file 
         * @param {string} name 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFile(file: any, name: string, requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFile(file, name, requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFile(fileID: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteFile(fileID, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたファイルを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(fileID: string, options?: any): AxiosPromise<any> {
            return localVarFp.getFile(fileID, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定されたファイルのメタデータを返す
         * @param {string} fileID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFileMeta(fileID: string, options?: any): AxiosPromise<FileMeta> {
            return localVarFp.getFileMeta(fileID, options).then((request) => request(axios, basePath));
        },
        /**
         * ファイルをアップロードする。
         * @param {any} file 
         * @param {string} name 
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFile(file: any, name: string, requestId: string, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.postFile(file, name, requestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
     * @param {string} fileID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFile(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).deleteFile(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたファイルを返す
     * @param {string} fileID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFile(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFile(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたファイルのメタデータを返す
     * @param {string} fileID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFileMeta(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFileMeta(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ファイルをアップロードする。
     * @param {any} file 
     * @param {string} name 
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public postFile(file: any, name: string, requestId: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).postFile(file, name, requestId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GroupsApi - axios parameter creator
 * @export
 */
export const GroupsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * グループを削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (groupID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('deleteGroup', 'groupID', groupID)
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーをグループのメンバーから外す。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupMembers: async (groupID: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('deleteGroupMembers', 'groupID', groupID)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('deleteGroupMembers', 'requestBody', requestBody)
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupOwners: async (groupID: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('deleteGroupOwners', 'groupID', groupID)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('deleteGroupOwners', 'requestBody', requestBody)
            const localVarPath = `/groups/{groupID}/owners`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループの情報を返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupDetail: async (groupID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('getGroupDetail', 'groupID', groupID)
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループを追加する。管理者権限が必要。
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroup: async (postGroup: PostGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postGroup' is not null or undefined
            assertParamExists('postGroup', 'postGroup', postGroup)
            const localVarPath = `/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupMembers: async (groupID: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('postGroupMembers', 'groupID', groupID)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('postGroupMembers', 'requestBody', requestBody)
            const localVarPath = `/groups/{groupID}/members`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupOwners: async (groupID: string, requestBody: Array<string>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('postGroupOwners', 'groupID', groupID)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('postGroupOwners', 'requestBody', requestBody)
            const localVarPath = `/groups/{groupID}/owners`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {PutGroup} putGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupDetail: async (groupID: string, putGroup: PutGroup, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupID' is not null or undefined
            assertParamExists('putGroupDetail', 'groupID', groupID)
            // verify required parameter 'putGroup' is not null or undefined
            assertParamExists('putGroupDetail', 'putGroup', putGroup)
            const localVarPath = `/groups/{groupID}`
                .replace(`{${"groupID"}}`, encodeURIComponent(String(groupID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupsApi - functional programming interface
 * @export
 */
export const GroupsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupsApiAxiosParamCreator(configuration)
    return {
        /**
         * グループを削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(groupID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(groupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーをグループのメンバーから外す。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupMembers(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupMembers(groupID, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroupOwners(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroupOwners(groupID, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループの情報を返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroupDetail(groupID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroupDetail(groupID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroups(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroups(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループを追加する。管理者権限が必要。
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroup(postGroup: PostGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGroup(postGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupMembers(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGroupMembers(groupID, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGroupOwners(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGroupOwners(groupID, requestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {PutGroup} putGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putGroupDetail(groupID: string, putGroup: PutGroup, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putGroupDetail(groupID, putGroup, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GroupsApi - factory interface
 * @export
 */
export const GroupsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupsApiFp(configuration)
    return {
        /**
         * グループを削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(groupID: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroup(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーをグループのメンバーから外す。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupMembers(groupID: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroupMembers(groupID, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroupOwners(groupID: string, requestBody: Array<string>, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroupOwners(groupID, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * グループの情報を返す。
         * @param {string} groupID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroupDetail(groupID: string, options?: any): AxiosPromise<GroupDetail> {
            return localVarFp.getGroupDetail(groupID, options).then((request) => request(axios, basePath));
        },
        /**
         * グループの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroups(options?: any): AxiosPromise<Array<Group>> {
            return localVarFp.getGroups(options).then((request) => request(axios, basePath));
        },
        /**
         * グループを追加する。管理者権限が必要。
         * @param {PostGroup} postGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroup(postGroup: PostGroup, options?: any): AxiosPromise<Group> {
            return localVarFp.postGroup(postGroup, options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupMembers(groupID: string, requestBody: Array<string>, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.postGroupMembers(groupID, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {Array<string>} requestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGroupOwners(groupID: string, requestBody: Array<string>, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.postGroupOwners(groupID, requestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
         * @param {string} groupID 
         * @param {PutGroup} putGroup 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putGroupDetail(groupID: string, putGroup: PutGroup, options?: any): AxiosPromise<Group> {
            return localVarFp.putGroupDetail(groupID, putGroup, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupsApi - object-oriented interface
 * @export
 * @class GroupsApi
 * @extends {BaseAPI}
 */
export class GroupsApi extends BaseAPI {
    /**
     * グループを削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroup(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループのメンバーから外す。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupMembers(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupMembers(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupOwners(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupOwners(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの情報を返す。
     * @param {string} groupID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupDetail(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupDetail(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroups(options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを追加する。管理者権限が必要。
     * @param {PostGroup} postGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public postGroup(postGroup: PostGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).postGroup(postGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public postGroupMembers(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).postGroupMembers(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {Array<string>} requestBody 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public postGroupOwners(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).postGroupOwners(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID 
     * @param {PutGroup} putGroup 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public putGroupDetail(groupID: string, putGroup: PutGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).putGroupDetail(groupID, putGroup, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RequestsApi - axios parameter creator
 * @export
 */
export const RequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定した依頼の詳細を取得する。
         * @param {string} requestID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestDetail: async (requestID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('getRequestDetail', 'requestID', requestID)
            const localVarPath = `/requests/{requestID}`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 依頼一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {StatusEnum} [status] 現在の状態
         * @param {string} [target] 誰との取引か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {number} [limit] 取得する最大個数
         * @param {number} [offset] スキップする個数
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {string} [createdBy] 作成者
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests: async (sort?: string, status?: StatusEnum, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, createdBy?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString().substr(0,10) :
                    since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString().substr(0,10) :
                    until;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (createdBy !== undefined) {
                localVarQueryParameter['created_by'] = createdBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼にコメントを新規作成する。
         * @param {string} requestID 
         * @param {PostComment} postComment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postComment: async (requestID: string, postComment: PostComment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('postComment', 'requestID', requestID)
            // verify required parameter 'postComment' is not null or undefined
            assertParamExists('postComment', 'postComment', postComment)
            const localVarPath = `/requests/{requestID}/comments`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postComment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 依頼を新規作成する。
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRequest: async (postRequest: PostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postRequest' is not null or undefined
            assertParamExists('postRequest', 'postRequest', postRequest)
            const localVarPath = `/requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼を修正する。作成者権限が必要。
         * @param {string} requestID 
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRequestDetail: async (requestID: string, postRequest: PostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('putRequestDetail', 'requestID', requestID)
            // verify required parameter 'postRequest' is not null or undefined
            assertParamExists('putRequestDetail', 'postRequest', postRequest)
            const localVarPath = `/requests/{requestID}`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。commentは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
         * @param {string} requestID 
         * @param {PutStatus} putStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStatus: async (requestID: string, putStatus: PutStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestID' is not null or undefined
            assertParamExists('putStatus', 'requestID', requestID)
            // verify required parameter 'putStatus' is not null or undefined
            assertParamExists('putStatus', 'putStatus', putStatus)
            const localVarPath = `/requests/{requestID}/status`
                .replace(`{${"requestID"}}`, encodeURIComponent(String(requestID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(putStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RequestsApi - functional programming interface
 * @export
 */
export const RequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定した依頼の詳細を取得する。
         * @param {string} requestID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequestDetail(requestID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequestDetail(requestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 依頼一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {StatusEnum} [status] 現在の状態
         * @param {string} [target] 誰との取引か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {number} [limit] 取得する最大個数
         * @param {number} [offset] スキップする個数
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {string} [createdBy] 作成者
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRequests(sort?: string, status?: StatusEnum, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, createdBy?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Request>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRequests(sort, status, target, since, until, limit, offset, tag, group, createdBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼にコメントを新規作成する。
         * @param {string} requestID 
         * @param {PostComment} postComment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postComment(requestID: string, postComment: PostComment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Comment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postComment(requestID, postComment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 依頼を新規作成する。
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postRequest(postRequest: PostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postRequest(postRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼を修正する。作成者権限が必要。
         * @param {string} requestID 
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putRequestDetail(requestID: string, postRequest: PostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putRequestDetail(requestID, postRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。commentは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
         * @param {string} requestID 
         * @param {PutStatus} putStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putStatus(requestID: string, putStatus: PutStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putStatus(requestID, putStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RequestsApi - factory interface
 * @export
 */
export const RequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RequestsApiFp(configuration)
    return {
        /**
         * 指定した依頼の詳細を取得する。
         * @param {string} requestID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequestDetail(requestID: string, options?: any): AxiosPromise<RequestDetail> {
            return localVarFp.getRequestDetail(requestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 依頼一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
         * @param {StatusEnum} [status] 現在の状態
         * @param {string} [target] 誰との取引か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {number} [limit] 取得する最大個数
         * @param {number} [offset] スキップする個数
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {string} [createdBy] 作成者
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRequests(sort?: string, status?: StatusEnum, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, createdBy?: string, options?: any): AxiosPromise<Array<Request>> {
            return localVarFp.getRequests(sort, status, target, since, until, limit, offset, tag, group, createdBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼にコメントを新規作成する。
         * @param {string} requestID 
         * @param {PostComment} postComment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postComment(requestID: string, postComment: PostComment, options?: any): AxiosPromise<Comment> {
            return localVarFp.postComment(requestID, postComment, options).then((request) => request(axios, basePath));
        },
        /**
         * 依頼を新規作成する。
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postRequest(postRequest: PostRequest, options?: any): AxiosPromise<RequestDetail> {
            return localVarFp.postRequest(postRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼を修正する。作成者権限が必要。
         * @param {string} requestID 
         * @param {PostRequest} postRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putRequestDetail(requestID: string, postRequest: PostRequest, options?: any): AxiosPromise<RequestDetail> {
            return localVarFp.putRequestDetail(requestID, postRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。commentは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
         * @param {string} requestID 
         * @param {PutStatus} putStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putStatus(requestID: string, putStatus: PutStatus, options?: any): AxiosPromise<StatusDetail> {
            return localVarFp.putStatus(requestID, putStatus, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RequestsApi - object-oriented interface
 * @export
 * @class RequestsApi
 * @extends {BaseAPI}
 */
export class RequestsApi extends BaseAPI {
    /**
     * 指定した依頼の詳細を取得する。
     * @param {string} requestID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public getRequestDetail(requestID: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).getRequestDetail(requestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
     * @param {StatusEnum} [status] 現在の状態
     * @param {string} [target] 誰との取引か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {number} [limit] 取得する最大個数
     * @param {number} [offset] スキップする個数
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {string} [createdBy] 作成者
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public getRequests(sort?: string, status?: StatusEnum, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, createdBy?: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).getRequests(sort, status, target, since, until, limit, offset, tag, group, createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼にコメントを新規作成する。
     * @param {string} requestID 
     * @param {PostComment} postComment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public postComment(requestID: string, postComment: PostComment, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).postComment(requestID, postComment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼を新規作成する。
     * @param {PostRequest} postRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public postRequest(postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).postRequest(postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼を修正する。作成者権限が必要。
     * @param {string} requestID 
     * @param {PostRequest} postRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public putRequestDetail(requestID: string, postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).putRequestDetail(requestID, postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。commentは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
     * @param {string} requestID 
     * @param {PutStatus} putStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public putStatus(requestID: string, putStatus: PutStatus, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).putStatus(requestID, putStatus, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タグの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグを追加する。
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTag: async (postTag: PostTag, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTag' is not null or undefined
            assertParamExists('postTag', 'postTag', postTag)
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグを削除する
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDDelete: async (tagID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagID' is not null or undefined
            assertParamExists('tagsTagIDDelete', 'tagID', tagID)
            const localVarPath = `/tags/{tagID}`
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タグの情報を取得する。
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet: async (tagID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tagID' is not null or undefined
            assertParamExists('tagsTagIDGet', 'tagID', tagID)
            const localVarPath = `/tags/{tagID}`
                .replace(`{${"tagID"}}`, encodeURIComponent(String(tagID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * タグの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTags(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTags(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグを追加する。
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTag(postTag: PostTag, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTag(postTag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグを削除する
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsTagIDDelete(tagID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsTagIDDelete(tagID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タグの情報を取得する。
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tagsTagIDGet(tagID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag & object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tagsTagIDGet(tagID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * タグの一覧を返す。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTags(options?: any): AxiosPromise<Array<Tag>> {
            return localVarFp.getTags(options).then((request) => request(axios, basePath));
        },
        /**
         * タグを追加する。
         * @param {PostTag} postTag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTag(postTag: PostTag, options?: any): AxiosPromise<Tag> {
            return localVarFp.postTag(postTag, options).then((request) => request(axios, basePath));
        },
        /**
         * タグを削除する
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDDelete(tagID: string, options?: any): AxiosPromise<void> {
            return localVarFp.tagsTagIDDelete(tagID, options).then((request) => request(axios, basePath));
        },
        /**
         * タグの情報を取得する。
         * @param {string} tagID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tagsTagIDGet(tagID: string, options?: any): AxiosPromise<Tag & object> {
            return localVarFp.tagsTagIDGet(tagID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * タグの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTags(options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを追加する。
     * @param {PostTag} postTag 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public postTag(postTag: PostTag, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).postTag(postTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを削除する
     * @param {string} tagID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDDelete(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDDelete(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの情報を取得する。
     * @param {string} tagID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDGet(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDGet(tagID, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TransactionsApi - axios parameter creator
 * @export
 */
export const TransactionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 指定したトランザクションの詳細を取得する。
         * @param {string} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionDetail: async (transactionID: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('getTransactionDetail', 'transactionID', transactionID)
            const localVarPath = `/transactions/{transactionID}`
                .replace(`{${"transactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トランザクション一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, 金額の昇順 \&quot;amount\&quot;, 金額の降順 \&quot;-amount\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {number} [limit] 取得する最大個数
         * @param {number} [offset] スキップする個数
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {string} [request] 依頼
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions: async (sort?: string, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, request?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any instanceof Date) ?
                    (since as any).toISOString().substr(0,10) :
                    since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any instanceof Date) ?
                    (until as any).toISOString().substr(0,10) :
                    until;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (group !== undefined) {
                localVarQueryParameter['group'] = group;
            }

            if (request !== undefined) {
                localVarQueryParameter['request'] = request;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * トランザクションを新規作成する。管理者権限が必要。
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransaction: async (postTransaction: PostTransaction, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'postTransaction' is not null or undefined
            assertParamExists('postTransaction', 'postTransaction', postTransaction)
            const localVarPath = `/transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTransaction, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定したTransactionを修正する。管理者権限が必要。requestに紐づいている場合は変更不可。
         * @param {string} transactionID 
         * @param {PostTransactionWithOneTarget} postTransactionWithOneTarget 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTransactionDetail: async (transactionID: string, postTransactionWithOneTarget: PostTransactionWithOneTarget, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionID' is not null or undefined
            assertParamExists('putTransactionDetail', 'transactionID', transactionID)
            // verify required parameter 'postTransactionWithOneTarget' is not null or undefined
            assertParamExists('putTransactionDetail', 'postTransactionWithOneTarget', postTransactionWithOneTarget)
            const localVarPath = `/transactions/{transactionID}`
                .replace(`{${"transactionID"}}`, encodeURIComponent(String(transactionID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postTransactionWithOneTarget, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionsApi - functional programming interface
 * @export
 */
export const TransactionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionsApiAxiosParamCreator(configuration)
    return {
        /**
         * 指定したトランザクションの詳細を取得する。
         * @param {string} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactionDetail(transactionID: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactionDetail(transactionID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トランザクション一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, 金額の昇順 \&quot;amount\&quot;, 金額の降順 \&quot;-amount\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {number} [limit] 取得する最大個数
         * @param {number} [offset] スキップする個数
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {string} [request] 依頼
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransactions(sort?: string, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, request?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransactions(sort, target, since, until, limit, offset, tag, group, request, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * トランザクションを新規作成する。管理者権限が必要。
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postTransaction(postTransaction: PostTransaction, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Transaction>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postTransaction(postTransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 指定したTransactionを修正する。管理者権限が必要。requestに紐づいている場合は変更不可。
         * @param {string} transactionID 
         * @param {PostTransactionWithOneTarget} postTransactionWithOneTarget 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putTransactionDetail(transactionID: string, postTransactionWithOneTarget: PostTransactionWithOneTarget, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transaction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putTransactionDetail(transactionID, postTransactionWithOneTarget, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionsApi - factory interface
 * @export
 */
export const TransactionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionsApiFp(configuration)
    return {
        /**
         * 指定したトランザクションの詳細を取得する。
         * @param {string} transactionID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactionDetail(transactionID: string, options?: any): AxiosPromise<Transaction> {
            return localVarFp.getTransactionDetail(transactionID, options).then((request) => request(axios, basePath));
        },
        /**
         * トランザクション一覧を取得する。
         * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, 金額の昇順 \&quot;amount\&quot;, 金額の降順 \&quot;-amount\&quot;)
         * @param {string} [target] 誰との取引か
         * @param {string} [since] いつからの依頼か
         * @param {string} [until] いつまでの依頼か
         * @param {number} [limit] 取得する最大個数
         * @param {number} [offset] スキップする個数
         * @param {string} [tag] タグ(複数の場合カンマ区切り)
         * @param {string} [group] グループ
         * @param {string} [request] 依頼
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransactions(sort?: string, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, request?: string, options?: any): AxiosPromise<Array<Transaction>> {
            return localVarFp.getTransactions(sort, target, since, until, limit, offset, tag, group, request, options).then((request) => request(axios, basePath));
        },
        /**
         * トランザクションを新規作成する。管理者権限が必要。
         * @param {PostTransaction} postTransaction 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postTransaction(postTransaction: PostTransaction, options?: any): AxiosPromise<Array<Transaction>> {
            return localVarFp.postTransaction(postTransaction, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定したTransactionを修正する。管理者権限が必要。requestに紐づいている場合は変更不可。
         * @param {string} transactionID 
         * @param {PostTransactionWithOneTarget} postTransactionWithOneTarget 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putTransactionDetail(transactionID: string, postTransactionWithOneTarget: PostTransactionWithOneTarget, options?: any): AxiosPromise<Transaction> {
            return localVarFp.putTransactionDetail(transactionID, postTransactionWithOneTarget, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
export class TransactionsApi extends BaseAPI {
    /**
     * 指定したトランザクションの詳細を取得する。
     * @param {string} transactionID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public getTransactionDetail(transactionID: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getTransactionDetail(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクション一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, 金額の昇順 \&quot;amount\&quot;, 金額の降順 \&quot;-amount\&quot;)
     * @param {string} [target] 誰との取引か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {number} [limit] 取得する最大個数
     * @param {number} [offset] スキップする個数
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {string} [request] 依頼
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public getTransactions(sort?: string, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, request?: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getTransactions(sort, target, since, until, limit, offset, tag, group, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクションを新規作成する。管理者権限が必要。
     * @param {PostTransaction} postTransaction 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public postTransaction(postTransaction: PostTransaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).postTransaction(postTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したTransactionを修正する。管理者権限が必要。requestに紐づいている場合は変更不可。
     * @param {string} transactionID 
     * @param {PostTransactionWithOneTarget} postTransactionWithOneTarget 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public putTransactionDetail(transactionID: string, postTransactionWithOneTarget: PostTransactionWithOneTarget, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).putTransactionDetail(transactionID, postTransactionWithOneTarget, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 自分の情報を取得する。存在しない場合はユーザーを作成する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ユーザー一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 自分の情報を取得する。存在しない場合はユーザーを作成する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMe(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ユーザー一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 自分の情報を取得する。存在しない場合はユーザーを作成する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<User> {
            return localVarFp.getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * ユーザー一覧を取得する。
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 自分の情報を取得する。存在しない場合はユーザーを作成する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザー一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }
}

export class Apis extends BaseAPI {
    /**
     * adminユーザーを削除する。管理者権限が必要。
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public deleteAdmins(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).deleteAdmins(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーの一覧を返す。管理者権限が必要。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public getAdmins(options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).getAdmins(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * adminユーザーを追加する。管理者権限が必要。
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminsApi
     */
    public postAdmins(requestBody: Array<string>, options?: AxiosRequestConfig) {
        return AdminsApiFp(this.configuration).postAdmins(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * PKCEを取得する｡
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public generatePKCE(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).generatePKCE(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したidのファイルを削除する。管理者権限または作成者権限が必要。
     * @param {string} fileID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public deleteFile(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).deleteFile(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたファイルを返す
     * @param {string} fileID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFile(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFile(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定されたファイルのメタデータを返す
     * @param {string} fileID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public getFileMeta(fileID: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).getFileMeta(fileID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ファイルをアップロードする。
     * @param {any} file
     * @param {string} name
     * @param {string} requestId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public postFile(file: any, name: string, requestId: string, options?: AxiosRequestConfig) {
        return FilesApiFp(this.configuration).postFile(file, name, requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroup(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroup(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループのメンバーから外す。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupMembers(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupMembers(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループから削除する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public deleteGroupOwners(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).deleteGroupOwners(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの情報を返す。
     * @param {string} groupID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroupDetail(groupID: string, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroupDetail(groupID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public getGroups(options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).getGroups(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループを追加する。管理者権限が必要。
     * @param {PostGroup} postGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public postGroup(postGroup: PostGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).postGroup(postGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public postGroupMembers(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).postGroupMembers(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループオーナーをグループに追加する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {Array<string>} requestBody
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public postGroupOwners(groupID: string, requestBody: Array<string>, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).postGroupOwners(groupID, requestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * グループの情報を変更する。管理者権限またはグループオーナー権限が必要。
     * @param {string} groupID
     * @param {PutGroup} putGroup
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupsApi
     */
    public putGroupDetail(groupID: string, putGroup: PutGroup, options?: AxiosRequestConfig) {
        return GroupsApiFp(this.configuration).putGroupDetail(groupID, putGroup, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼の詳細を取得する。
     * @param {string} requestID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public getRequestDetail(requestID: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).getRequestDetail(requestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, タイトルの昇順 \&quot;title\&quot;, タイトルの降順 \&quot;-title\&quot;)
     * @param {StatusEnum} [status] 現在の状態
     * @param {string} [target] 誰との取引か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {number} [limit] 取得する最大個数
     * @param {number} [offset] スキップする個数
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {string} [createdBy] 作成者
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public getRequests(sort?: string, status?: StatusEnum, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, createdBy?: string, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).getRequests(sort, status, target, since, until, limit, offset, tag, group, createdBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼にコメントを新規作成する。
     * @param {string} requestID
     * @param {PostComment} postComment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public postComment(requestID: string, postComment: PostComment, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).postComment(requestID, postComment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 依頼を新規作成する。
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public postRequest(postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).postRequest(postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼を修正する。作成者権限が必要。
     * @param {string} requestID
     * @param {PostRequest} postRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public putRequestDetail(requestID: string, postRequest: PostRequest, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).putRequestDetail(requestID, postRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定した依頼のstatusを変更のみ(新規はpost /requests)する。commentは常に必須(ないときは空文字列)。statusの行き来の定義は作成者は「fix_requiredからsubmitted」をでき、adminは「submittedからrejected」「submittedからrequired」「fix_requiredからsubmitted」「submittedからaccepted」「acceptedからsubmitted（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「acceptedからfully_repaid」の操作はここでは行えない。管理者権限または作成者権限が必要。
     * @param {string} requestID
     * @param {PutStatus} putStatus
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RequestsApi
     */
    public putStatus(requestID: string, putStatus: PutStatus, options?: AxiosRequestConfig) {
        return RequestsApiFp(this.configuration).putStatus(requestID, putStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの一覧を返す。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTags(options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).getTags(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを追加する。
     * @param {PostTag} postTag
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public postTag(postTag: PostTag, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).postTag(postTag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグを削除する
     * @param {string} tagID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDDelete(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDDelete(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タグの情報を取得する。
     * @param {string} tagID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public tagsTagIDGet(tagID: string, options?: AxiosRequestConfig) {
        return TagsApiFp(this.configuration).tagsTagIDGet(tagID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したトランザクションの詳細を取得する。
     * @param {string} transactionID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public getTransactionDetail(transactionID: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getTransactionDetail(transactionID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクション一覧を取得する。
     * @param {string} [sort] 並び順 (作成日時が新しい \&quot;created_at\&quot;, 作成日時が古い \&quot;-created_at\&quot;, 金額の昇順 \&quot;amount\&quot;, 金額の降順 \&quot;-amount\&quot;)
     * @param {string} [target] 誰との取引か
     * @param {string} [since] いつからの依頼か
     * @param {string} [until] いつまでの依頼か
     * @param {number} [limit] 取得する最大個数
     * @param {number} [offset] スキップする個数
     * @param {string} [tag] タグ(複数の場合カンマ区切り)
     * @param {string} [group] グループ
     * @param {string} [request] 依頼
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public getTransactions(sort?: string, target?: string, since?: string, until?: string, limit?: number, offset?: number, tag?: string, group?: string, request?: string, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).getTransactions(sort, target, since, until, limit, offset, tag, group, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * トランザクションを新規作成する。管理者権限が必要。
     * @param {PostTransaction} postTransaction
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public postTransaction(postTransaction: PostTransaction, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).postTransaction(postTransaction, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定したTransactionを修正する。管理者権限が必要。requestに紐づいている場合は変更不可。
     * @param {string} transactionID
     * @param {PostTransactionWithOneTarget} postTransactionWithOneTarget
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    public putTransactionDetail(transactionID: string, postTransactionWithOneTarget: PostTransactionWithOneTarget, options?: AxiosRequestConfig) {
        return TransactionsApiFp(this.configuration).putTransactionDetail(transactionID, postTransactionWithOneTarget, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 自分の情報を取得する。存在しない場合はユーザーを作成する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getMe(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ユーザー一覧を取得する。
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }
}
